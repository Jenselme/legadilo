# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--ds=config.settings.test --reuse-db --disable-socket --allow-unix-socket --allow-hosts=localhost"
python_files = [
    "tests.py",
    "test_*.py",
]

# ==== Coverage ====
[tool.coverage.run]
include = ["legadilo/**"]
omit = ["*/migrations/*", "*/tests/*"]
plugins = ["django_coverage_plugin"]


# ==== Ruf ====
[tool.ruff]
line-length = 119
target-version = "py312"
ignore = [
    "RUF012", # RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    "COM812", # missing-trailing-comma (the formatter will do this)
    "ISC001", # single-line-implicit-string-concatenation (the formatter will do this)
    "PLR6301", # Method XXX could be a function, class method, or static method
]

[tool.ruff.per-file-ignores]
"legadilo/**/tests/**/test_*.py" = [
    # at least this three should be fine in tests:
    "S101", # asserts allowed in tests...
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "PLR2004", # Magic value used in comparison, ...
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "S106", # Possible hardcoded password
]
"legadilo/**/factories.py" = [
    "FBT001", # Boolean-typed positional argument in function definition
    "ARG002", #  Unused method argument
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
]
"legadilo/**/migrations/*.py" = [
    "E501", # Line too long.
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
]
"config/wsgi.py" = [
    "ERA001", # Found commented-out code
]
"config/asgi.py" = [
    "ERA001", # Found commented-out code
]
"config/settings/*.py" = [
    "ERA001", # Found commented-out code
]

[tool.ruff.lint]
select = [
    "F", "E", "W", "C", "I", "N", "UP", "ASYNC", "S", "BLE", "FBT", "B", "A", "COM", "DTZ", "T",
    "DJ", "ICN", "RSE", "PT", "ISC", "RET", "SIM", "INT", "PTH", "ERA", "PGH", "PL", "FLY",
    "FURB", "LOG", "RUF"
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = [
    "legadilo",
    "config",
]


# ==== curlylint ====
[tool.curlylint.rules]
# All role attributes must be valid.
# See https://www.curlylint.org/docs/rules/aria_role.
aria_role = true
# Forms cannot be rendered with as_table, as_ul, or as_p
# See https://www.curlylint.org/docs/rules/django_forms_rendering.
django_forms_rendering = true
# The `lang` attribute must be present.
# See https://www.curlylint.org/docs/rules/html_has_lang.
html_has_lang = true
# The `alt` attribute must be present.
# See https://www.curlylint.org/docs/rules/image_alt.
image_alt = true
# Use tabs.
# See https://www.curlylint.org/docs/rules/indent.
indent = 4
# `user-scalable=no` must not be used, and `maximum-scale` should be 2 or above.
# See https://www.curlylint.org/docs/rules/meta_viewport.
meta_viewport = true
# The `autofocus` attribute must not be used.
# See https://www.curlylint.org/docs/rules/no_autofocus.
no_autofocus = true
# Avoid positive `tabindex` values, change the order of elements on the page instead.
# See https://www.curlylint.org/docs/rules/tabindex_no_positive.
tabindex_no_positive = true


# ==== mypy ====
[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = [
    "mypy_django_plugin.main",
]

[[tool.mypy.overrides]]
# Django migrations should not produce any errors:
module = "*.migrations.*"
ignore_errors = true

[tool.django-stubs]
django_settings_module = "config.settings.test"


# ==== djLint ====
[tool.djlint]
blank_line_after_tag = "load,extends"
close_void_tags = true
format_css = true
format_js = true
# TODO: remove T002 when fixed https://github.com/Riverside-Healthcare/djLint/issues/687
ignore = "H006,H030,H031,T002"
include = "H017,H035"
indent = 4
max_line_length = 119
profile = "django"

[tool.djlint.css]
indent_size = 4

[tool.djlint.js]
indent_size = 4

[tool.poetry]
name = "legadilo"
version = "0.1.0"
description = ""
authors = ["Julien Enselme <jujens@jujens.eu>"]
license = "AGPLv3"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"

# General
# ------------------------------------------------------------------------------
python-slugify = "8.0.1"  # https://github.com/un33k/python-slugify
Pillow = "10.2.0"  # https://github.com/python-pillow/Pillow
argon2-cffi = "23.1.0"  # https://github.com/hynek/argon2_cffi
whitenoise = "6.6.0"  # https://github.com/evansd/whitenoise
psycopg = { extras = ["binary"], version = "3.1.17" }  # https://github.com/psycopg/psycopg
rich = "^13.7.0"  # https://rich.readthedocs.io/en/stable/

# Django
# ------------------------------------------------------------------------------
django = "5.0.1"  # https://www.djangoproject.com/
django-environ = "0.11.2"  # https://github.com/joke2k/django-environ
django-allauth = "0.60.1"  # https://github.com/pennersr/django-allauth
django-crispy-forms = "2.1"  # https://github.com/django-crispy-forms/django-crispy-forms
crispy-bootstrap5 = "2023.10"  # https://github.com/django-crispy-forms/crispy-bootstrap5
django-anymail = "10.2"  # https://github.com/anymail/django-anymail
daphne = "^4.0.0"  # https://github.com/django/daphne
django-version-checks = "1.11.0"
django-extra-checks = "0.13.3"
django-csp = "3.7"  # https://django-csp.readthedocs.io/en/latest/index.html
django-axes = "6.3.0"  # https://github.com/jazzband/django-axes

# Project
# ------------------------------------------------------------------------------
feedparser = "^6.0.11"  # https://feedparser.readthedocs.io/en/latest/
httpx = "^0.26.0"  # https://www.python-httpx.org/
beautifulsoup4 = "^4.12.2"  # https://www.crummy.com/software/BeautifulSoup/bs4/doc/
nh3 = "^0.2.15"  # https://nh3.readthedocs.io/en/latest/
jsonschema = "^4.21.1"  # https://github.com/python-jsonschema/jsonschema
python-dateutil = "^2.8.2" # https://github.com/dateutil/dateutil


[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pudb = "2024.1"  # https://documen.tician.de/pudb/
ipdb = "0.13.13"  # https://github.com/gotcha/ipdb

# Testing
# ------------------------------------------------------------------------------
mypy = "1.7.1"  # https://github.com/python/mypy
django-stubs = { extras = ["compatible-mypy"], version = "4.2.7" }  # https://github.com/typeddjango/django-stubs
pytest = "7.4.4"  # https://github.com/pytest-dev/pytest
pytest-sugar = "0.9.7"  # https://github.com/Frozenball/pytest-sugar
time-machine = "2.13.0"  #  https://github.com/adamchainz/time-machine

# Documentation
# ------------------------------------------------------------------------------
sphinx = "7.2.6"  # https://github.com/sphinx-doc/sphinx
sphinx-autobuild = "2021.3.14"  # https://github.com/GaretJax/sphinx-autobuild
myst-parser = "2.0.0"  # https://myst-parser.readthedocs.io/en/stable/intro.html

# Code quality
# ------------------------------------------------------------------------------
coverage = "7.4.0"  # https://github.com/nedbat/coveragepy
ruff = "0.1.13"  # https://github.com/astral-sh/ruff
pre-commit = "3.6.0"  # https://github.com/pre-commit/pre-commit

# Django
# ------------------------------------------------------------------------------
factory-boy = "3.3.0"  # https://github.com/FactoryBoy/factory_boy
django-debug-toolbar = "4.2.0"  # https://github.com/jazzband/django-debug-toolbar
django-coverage-plugin = "3.1.0"  # https://github.com/nedbat/django_coverage_plugin
pytest-django = "4.7.0"  # https://github.com/pytest-dev/pytest-django
django-browser-reload = "1.12.1"  # https://pypi.org/project/django-browser-reload/
django-watchfiles = "0.1.0"  # https://github.com/adamchainz/django-watchfiles
pytest-httpx = "^0.28.0"  # https://colin-b.github.io/pytest_httpx/
pytest-asyncio = "^0.23.3"  # https://github.com/pytest-dev/pytest-asyncio/
pytest-mock = "^3.12.0"    # https://pytest-mock.readthedocs.io/en/latest/
pytest-socket = "0.6.0"  # https://github.com/miketheman/pytest-socket

[tool.poetry.group.typing]
optional = true

[tool.poetry.group.typing.dependencies]
types-python-dateutil = "^2.8.19.20240106"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
