# Legadilo
# Copyright (C) 2023-2025 by Legadilo contributors.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# SPDX-License-Identifier: AGPL-3.0-or-later

# Generated by Django 5.0.6 on 2024-05-23 19:28

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("feeds", "0001_initial"),
        ("reading", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="feedarticle",
            name="article",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="feed_articles",
                to="reading.article",
            ),
        ),
        migrations.AddField(
            model_name="feedarticle",
            name="feed",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="feed_articles",
                to="feeds.feed",
            ),
        ),
        migrations.AddField(
            model_name="feed",
            name="articles",
            field=models.ManyToManyField(
                related_name="feeds", through="feeds.FeedArticle", to="reading.article"
            ),
        ),
        migrations.AddField(
            model_name="feedcategory",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="feed_categories",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="feed",
            name="category",
            field=models.ForeignKey(
                null=True,
                blank=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="feeds",
                to="feeds.feedcategory",
            ),
        ),
        migrations.AddField(
            model_name="feedtag",
            name="feed",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="feed_tags",
                to="feeds.feed",
            ),
        ),
        migrations.AddField(
            model_name="feedtag",
            name="tag",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="feed_tags",
                to="reading.tag",
            ),
        ),
        migrations.AddField(
            model_name="feedupdate",
            name="feed",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="feed_updates",
                to="feeds.feed",
            ),
        ),
        migrations.AddConstraint(
            model_name="feedarticle",
            constraint=models.UniqueConstraint(
                models.F("feed"),
                models.F("article"),
                name="feeds_feedarticle_article_linked_once_per_feed",
            ),
        ),
        migrations.AddConstraint(
            model_name="feedcategory",
            constraint=models.UniqueConstraint(
                models.F("slug"), models.F("user"), name="feeds_feedcategory_unique"
            ),
        ),
        migrations.AddConstraint(
            model_name="feed",
            constraint=models.UniqueConstraint(
                models.F("feed_url"), models.F("user"), name="feeds_feed_feed_url_unique"
            ),
        ),
        migrations.AddConstraint(
            model_name="feed",
            constraint=models.CheckConstraint(
                condition=models.Q((
                    "feed_type__in",
                    [
                        "rss090",
                        "rss091n",
                        "rss091u",
                        "rss092",
                        "rss093",
                        "rss094",
                        "rss20",
                        "rss10",
                        "rss",
                        "atom01",
                        "atom02",
                        "atom03",
                        "atom10",
                        "atom",
                        "cdf",
                        "json1",
                    ],
                )),
                name="feeds_feed_feed_type_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="feed",
            constraint=models.CheckConstraint(
                condition=models.Q((
                    "refresh_delay__in",
                    [
                        "HOURLY",
                        "BIHOURLY",
                        "EVERY_MORNING",
                        "DAILY_AT_NOON",
                        "EVERY_EVENING",
                        "ON_MONDAYS",
                        "ON_THURSDAYS",
                        "TWICE_A_WEEK",
                        "FIRST_DAY_OF_THE_MONTH",
                        "MIDDLE_OF_THE_MONTH",
                        "END_OF_THE_MONTH",
                        "THRICE_A_MONTH",
                    ],
                )),
                name="feeds_feed_refresh_delay_type_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="feed",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("disabled_reason", ""), ("enabled", True)),
                    ("enabled", False),
                    _connector="OR",
                ),
                name="feeds_feed_disabled_reason_empty_when_enabled",
            ),
        ),
        migrations.AddConstraint(
            model_name="feedtag",
            constraint=models.UniqueConstraint(
                models.F("feed"), models.F("tag"), name="feeds_feedtag_tagged_once_per_feed"
            ),
        ),
        migrations.AddConstraint(
            model_name="feedupdate",
            constraint=models.CheckConstraint(
                condition=models.Q(("status__in", ["SUCCESS", "FAILURE", "NOT_MODIFIED"])),
                name="feeds_feedupdate_status_valid",
            ),
        ),
    ]
